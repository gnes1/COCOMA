to-report Pareto [ tuple1 tuple2 ]
  report (item 0 tuple1 > item 0 tuple2  and  item 1 tuple1 < item 1 tuple2) 
  or (item 0 tuple1 = item 0 tuple2  and  item 1 tuple1 < item 1 tuple2) 
  or (item 0 tuple1 > item 0 tuple2  and  item 1 tuple1 = item 1 tuple2)
end



to-report owa [tuple] 
  report (2 / 3) * min tuple + (1 / 3) * max tuple
end

to-report procedureChoix [ listeTuple ] 
  let notListePareto []
  let i 0
  
  while [ i < length(listeTuple)]
  [
   let j 0
   while [ j < length(listeTuple)]
   [
     if i != j 
     [
       if  Pareto item i listeTuple item j listeTuple 
       [
         set notListePareto lput item j listeTuple notListePareto
       ]
     ]
     set j j + 1 
   ]
   set i i + 1
  ]
  set notListePareto remove-duplicates notListePareto
; print (list "notlistePareto" notListePareto)
  
  let listeAuxPareto []
  set i 0
  while [ i < length(listeTuple) ]
  [
    if not member? item i listeTuple notListePareto 
    [
      set listeAuxPareto lput item i listeTuple listeAuxPareto
    ] 
   set i i + 1    
  ]
 ; print (list "auxpareto" listeAuxPareto)
  let listeParetoOWA []
  set i 0
  while [ i < length(listeAuxPareto)]
  [
    set listeParetoOWA lput (list item i listeAuxPareto owa item i listeAuxPareto) listeParetoOWA
    set i i + 1 
  ]
 ; print (list "owa" listeParetoOWA)
  set i 0
  let tupleMax item 0 item 0 listeParetoOWA
  let valueTupleMax item 1 item 0 listeParetoOWA
  
  while [i < length(listeParetoOWA)]
  [
      if valueTupleMax < item 1 item i listeParetoOWA
      [
        set valueTupleMax  item 1 item i listeParetoOWA
        set tupleMax item 0 item i listeParetoOWA
      ] 
    set i i + 1
  ]

  report tupleMax
end

to-report distanceManhattan [ pos pos1]
  report abs(item 0 pos - item 0 pos1) + abs (item 1 pos - item 1 pos1) + abs(item 2 pos - item 2 pos1)
end